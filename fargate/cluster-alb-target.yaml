---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fargate: service that runs on a Fargate cluster based on fargate/cluster.yaml and uses the cluster ALB, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClusterStack
      - ParentAlertStack
      - ParentZoneStack
    - Label:
        default: 'Load Balancer Parameters'
      Parameters:
      - LoadBalancerPriority
      - LoadBalancerHostPattern
      - LoadBalancerPathPattern
      - LoadBalancerHttps
      - LoadBalancerDeregistrationDelay
      - LoadBalancerStickiness
      - HealthCheckPath
    - Label:
        default: 'Service Parameters'
      Parameters:
      - SubDomainNameWithDot
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClusterStack:
    Description: 'Stack name of parent Cluster stack based on fargate/cluster.yaml template.'
    Type: String
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ''
  LoadBalancerPriority:
    Description: 'The priority for the rule. Elastic Load Balancing evaluates rules in priority order, from the lowest value to the highest value. If a request satisfies a rule, Elastic Load Balancing ignores all subsequent rules. A target group can have only one rule with a given priority.'
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-99999]'
    MinValue: 1
    MaxValue: 99999
  LoadBalancerHostPattern:
    Description: 'Optional host pattern. Specify LoadBalancerPathPattern and/or LoadBalancerHostPattern.'
    Type: String
    Default: ''
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerPathPattern:
    Description: 'Optional path pattern. Specify LoadBalancerPathPattern and/or LoadBalancerHostPattern.'
    Type: String
    Default: '/*'
    ConstraintDescription: 'Must not be longer than 255'
    MaxLength: 255
  LoadBalancerHttps:
    Description: 'If the cluster supports HTTPS (LoadBalancerCertificateArn is set) you can enable HTTPS for the service'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  LoadBalancerStickiness:
    Description: 'Determines whether or not the load balancer uses sticky sessions for the service'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  HealthCheckPath:
    Description: 'Path used by ALB health checks (should return status code from range 200-299)'
    Type: String
    Default: '/'
  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ยง{SubDomainNameWithDot}ยง{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: ''
Conditions:
  HasLoadBalancerHttps: !Equals [!Ref LoadBalancerHttps, 'true']
  HasLoadBalancerPathPattern: !Not [!Equals [!Ref LoadBalancerPathPattern, '']]
  HasLoadBalancerHostPattern: !Not [!Equals [!Ref LoadBalancerHostPattern, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
Resources:
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: 8080 # overriden when containers are attached
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref LoadBalancerDeregistrationDelay
      - Key: stickiness.enabled
        Value: !Ref LoadBalancerStickiness
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: {'Fn::ImportValue': !Sub '${ParentClusterStack}-CanonicalHostedZoneID'}
        DNSName: {'Fn::ImportValue': !Sub '${ParentClusterStack}-DNSName'}
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      Type: A
  HTTPCodeTarget5XXTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt TargetGroup.TargetGroupFullName
      - Name: !Ref TargetGroup
        Value: !GetAtt TargetGroup.TargetGroupFullName
      TreatMissingData: notBreaching
  TargetConnectionErrorCountTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt TargetGroup.TargetGroupFullName
      - Name: !Ref TargetGroup
        Value: !GetAtt TargetGroup.TargetGroupFullName
      TreatMissingData: notBreaching
  LoadBalancerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions: !If
      - HasLoadBalancerPathPattern
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
          - Field: path-pattern
            Values:
            - !Sub '${LoadBalancerPathPattern}'
        - - Field: path-pattern
            Values:
            - !Sub '${LoadBalancerPathPattern}'
      - !If
        - HasLoadBalancerHostPattern
        - - Field: host-header
            Values:
            - !Ref LoadBalancerHostPattern
        - [] # neither LoadBalancerHostPattern nor LoadBalancerPathPattern specified
      ListenerArn: !If [HasLoadBalancerHttps, {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpsListener'}, {'Fn::ImportValue': !Sub '${ParentClusterStack}-HttpListener'}]
      Priority: !Ref LoadBalancerPriority
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'fargate/cluster-alb-target'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  TargetGroup:
    Description: 'Security Group for Load Balancer'
    Value: !Ref TargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-TargetGroup'
  SecurityGroup:
    Description: 'Security Group for Load Balancer'
    Value: {'Fn::ImportValue': !Sub '${ParentClusterStack}-LoadBalancerSecurityGroup'}
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
